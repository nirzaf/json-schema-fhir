/// <reference types="node" />
/// <reference lib="webworker" />
import type { RequestListener, ServerResponse } from 'node:http';
import { NodeRequest } from './utils';
export interface CreateServerAdapterOptions<TServerContext, TBaseObject> {
    /**
     * WHATWG Fetch spec compliant `Request` constructor.
     */
    Request?: typeof Request;
    /**
     * An async function that takes `Request` and the server context and returns a `Response`.
     * If you use `requestListener`, the server context is `{ req: IncomingMessage, res: ServerResponse }`.
     */
    handleRequest: (request: Request, serverContext: TServerContext) => Promise<Response>;
    /**
     * If you extend a server object with this, you can pass the original object and it will be extended with the required methods and functionalities.
     */
    baseObject?: TBaseObject;
}
export interface ServerAdapterObject<TServerContext> extends EventListenerObject {
    /**
     * A basic request listener that takes a `Request` with the server context and returns a `Response`.
     */
    handleRequest: (request: Request, serverContext: TServerContext) => Promise<Response>;
    /**
     * WHATWG Fetch spec compliant `fetch` function that can be used for testing purposes.
     */
    fetch(request: Request, ...ctx: any[]): Promise<Response>;
    fetch(urlStr: string, ...ctx: any[]): Promise<Response>;
    fetch(urlStr: string, init: RequestInit, ...ctx: any[]): Promise<Response>;
    fetch(url: URL, ...ctx: any[]): Promise<Response>;
    fetch(url: URL, init: RequestInit, ...ctx: any[]): Promise<Response>;
    /**
     * This function takes Node's request object and returns a WHATWG Fetch spec compliant `Response` object.
     **/
    handleNodeRequest(nodeRequest: NodeRequest, serverContext: TServerContext): Promise<Response>;
    /**
     * A request listener function that can be used with any Node server variation.
     */
    requestListener: RequestListener;
    /**
     * Proxy to requestListener to mimic Node middlewares
     */
    handle: RequestListener;
}
export declare type ServerAdapter<TServerContext, TBaseObject> = TBaseObject & RequestListener & ServerAdapterObject<TServerContext>['fetch'] & ServerAdapterObject<TServerContext>;
export declare function createServerAdapter<TServerContext = {
    req: NodeRequest;
    res: ServerResponse;
    waitUntil(promise: Promise<unknown>): void;
}, TBaseObject = unknown>({ Request: RequestCtor, handleRequest, baseObject, }: CreateServerAdapterOptions<TServerContext, TBaseObject>): ServerAdapter<TServerContext, TBaseObject>;
