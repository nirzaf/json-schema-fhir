import { PromiseOrValue } from '@envelop/core';
import { IResolvers, TypeSource } from '@graphql-tools/utils';
import { GraphQLSchema } from 'graphql';
import { GraphQLSchemaWithContext, YogaInitialContext } from '../types';
import { Plugin } from './types';
declare type TypeDefsAndResolvers<TContext, TRootValue = {}> = {
    typeDefs: TypeSource;
    resolvers?: IResolvers<TRootValue, TContext> | Array<IResolvers<TRootValue, TContext>>;
};
export declare type YogaSchemaDefinition<TContext, TRootValue> = TypeDefsAndResolvers<TContext, TRootValue> | PromiseOrValue<GraphQLSchemaWithContext<TContext>> | ((request: Request) => PromiseOrValue<GraphQLSchemaWithContext<TContext>>);
export declare function getDefaultSchema(): GraphQLSchema;
export declare const useSchema: <TContext extends YogaInitialContext = YogaInitialContext, TRootValue = {}>(schemaDef?: YogaSchemaDefinition<TContext, TRootValue> | undefined) => Plugin<TContext, {}, {}>;
export {};
